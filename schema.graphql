type EtherFreakers @entity { # done
  id: ID!
  "An array of the Ether spent to birth a Freaker. In birth order. Ascending"
  birthCertificates: [BigInt!]!
  "The creator index is updated on any births or attacks through _dissipateEnergyIntoPool. Energy (i.e. Ether) gets dissipated into the pool. Creator births, all energy goes to the creator index. All other births and attacks, 20% goes to the creator index"
  creatorIndex: BigInt!
  "The freaker index is updated on any births or attacks through _dissipateEnergyIntoPool. Energy (i.e. Ether) gets dissipated into the pool. All births and attacks, 80% goes to the freaker index. It is divided by the total fortune"
  freakerIndex: BigInt!
  "Total fortune of all Freakers ever created"
  totalFortune: BigInt!
  "Middle price of the array of prices paid to birth a freaker (i.e. middle price of birth certificates)"
  middlePrice: BigInt!

  "Total missed attacks in the protocol ever"
  missedAttackCounts: Int!
  "Total thwarted attacks in the protocol ever"
  thwartedAttackCounts: Int!
  "Total captures in the protocol ever"
  capturedCounts: Int!
  "Global Species Count"
  plutoCount: Int!
  "Global Species Count"
  mercuryCount: Int!
  "Global Species Count"
  saturnCount: Int!
  "Global Species Count"
  uranusCount: Int!
  "Global Species Count"
  venusCount: Int!
  "Global Species Count"
  marsCount: Int!
  "Global Species Count"
  neptuneCount: Int!
  "Global Species Count"
  jupiterCount: Int!
}

type Species @entity {
  "Species number"
  id: ID!
  "Species of the Freaker"
  speciesName: SpeciesName!
  "Odds of being born. Out of 100"
  bornOdds: Int!
  "Min 1. Max 10"
  maxStamina: Int!
  "Min 1. Max 30"
  maxFortune: Int!
  "Min 1. Max 30"
  maxAgility: Int!
  "Min 1. Max 30"
  maxOffense: Int!
  "Min 1. Max 30"
  maxDefense: Int!
  "Freakers of this species"
  freakers: [Freaker!]! @derivedFrom(field: "species")
}

type Freaker @entity {
  "ID of the Freaker"
  id: ID!
  "Species of the Freaker"
  species: Species!
  "Stamina of the Freaker"
  stamina: Int!
  "Fortune of the Freaker"
  fortune: Int!
  "Agility of the Freaker"
  agility: Int!
  "Offence of the Freaker"
  offense: Int!
  "Defense of the Freaker"
  defense: Int!
  "Total score. Max possible is 79 for non-immortals"
  totalScore: Int!
  "The mother that birthed the Freaker"
  mother: Bytes!
  "The current owner of the Freaker"
  owner: Account!
  "URL to get token information"
  tokenURI: String!
  "Is immortal if it is one of the first 8 minted freakers"
  isImmortal: Boolean!

  "The basic energy is set as half the msg.value at birth. To get energy, you do energyBalanceBasic + (freakerIndex - energyBalanceIndex) * freakerFortune"
  energyBalanceBasic: BigInt!
  "A snapshot of the global freaker index the last time this freakers basic balance was updated"
  energyBalanceIndex: BigInt!

  "Time born at"
  bornAtTime: Int!
  "Block born at"
  bornAtBlock: Int!
  "Times this freaker has attacked and missed"
  attackerMissedCounts: Int!
  "Times this freaker has dodged an attack against them"
  defenderMissedCounts: Int!
  "Times this freaker has had their attack thwarted"
  attackerThwartedCounts: Int!
  "Times this freaker has been attacked and thwarted it"
  defenderThwartedCounts: Int!
  "Times this freaker has captured another freaker"
  attackerCapturedCounts: Int!
  "Times this freaker has been captured"
  defenderCapturedCounts: Int!
  
}

type Account @entity {
  "Ethereum address"
  id: ID!
  "Account Species Count"
  plutoCount: Int!
  "Account Species Count"
  mercuryCount: Int!
  "Account Species Count"
  saturnCount: Int!
  "Account Species Count"
  uranusCount: Int!
  "Account Species Count"
  venusCount: Int!
  "Account Species Count"
  marsCount: Int!
  "Account Species Count"
  neptuneCount: Int!
  "Account Species Count"
  jupiterCount: Int!
  "Is enlightened is true if the account has at least 1 of each species"
  isEnlightened: Boolean!
  "attackMultipler = the sum of the squares of the offense of each freaker an account owns. Then  attackPower = attackMultiplier * energy"
  attackMultiplier: BigInt!
  "defendMultiplier = the sum of the squares of the defense of each freaker an account owns. Then defendPower = defendMultiplier * energy"
  defendMultiplier: BigInt!
  "All freakers this account owns"
  freakers: [Freaker!]! @derivedFrom(field: "owner")
}

enum SpeciesName {
  pluto
  mercury
  saturn
  uranus
  venus
  mars
  neptune
  jupiter
}
